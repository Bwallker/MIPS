.data
	size_of_buffer: .word 20
	buffer: .space 20
    	# It is important that size_of_buffer and the buffer is kept in sync.
    	val_of_a:  .asciiz "Enter the value of a (Must be a valid int): "
    	val_of_b: .asciiz "Enter the value of b (Must be a valid int): "
    	val_of_c: .asciiz "Enter the value of c (Must be a valid int): "
    	val_of_d: .asciiz "Enter the value of d (Must be a valid int): "
    	result:  .asciiz "(a + b + c) - d = "
	parse_error: .asciiz "There was an error parsing your input"
.text
# Main routine
main:

    	la $a0, val_of_a    # Print message asking user to type in a value for A
    	jal get_input # Get input for a and parse it and handle error
    	# Save value of A in $s0
    	move $s0, $v0
	la $a0, val_of_b
	jal get_input
	move $s1, $v0 # Save B in $s1
	
	la $a0, val_of_c
	jal get_input
	move $s2, $v0 # Save C in $s2
	
	la $a0, val_of_d
	jal get_input
	move $s3, $v0 # Save D in $s3
	
	# We are using the s registers to store our variables since by calling convention our subroutines won't mess with them.
	# We'll use $t0 to store the result of our calculatioon
    	# Reminder that the thing we are trying to calculate is: (a + b + c) - d
    	# Add A and B
    	add $t0, $s0, $s1
    	# Add C
    	add $t0, $t0, $s2
    	# Sub D
    	sub $t0, $t0, $s3
    	
    	# Print result message and our result:
    	la $a0 result
    	li $v0, 4
    	syscall
    	move $a0, $t0
    	li $v0 1
    	syscall
    	
    	# Mission accomplished! We can exit in peace :)
    	
    	li $v0, 17 # Exit successful
    	li $a0, 0
    	syscall
# Routine for getting the vakue of one of our variables, parsing it and handling errors before returning. Takes the string to print as an input in $a0
get_input:
	li $v0, 4
    	syscall

    	li $v0, 8       # Read inpu
	
    	la $a0, buffer  # Use our buffer as the buffer for the input
    	lw $a1, size_of_buffer      # Tell the runtime how big our buffer is
    	syscall
    	# Save return address on the stack so it doesn't get clobbered by parse int
    	sub $sp, $sp, 4
    	sw $ra, ($sp)

    	jal parse_int # Try to parse the input
    	beq $v1, 1, handle_error # Branch on error
    	# Restore return address
    	lw $ra, ($sp)
    	# Increment sp so we don't corrupt the stack
    	add $sp, $sp, 4
    	jr $ra
	
# Routine for handling int parse errors
handle_error:
	la $a0, parse_error
	li $v0, 4
	syscall # Print error message
	li $v0, 17
	li $a0, 1
	syscall #Exit with error code 1
    	
# This routine takes the string in a0 and tries to parse it into an int. The result is returned in v0. If an error occured v1 will be 1, otherwise v1 is 0
# This function will jump back to the value in ra when it finishes
parse_int:
	li $v0, 0
	la $t0, buffer
	lw $t3, size_of_buffer
	add $t2, $t3, $t0
parse_int_loop:
	# Break if we have gone out of bounds
	bge $t0, $t2, parse_int_return
	# Load character at index into t1
	lbu $t1, ($t0)
	# Exit if end line char as the docs dictate
	beq $t1, 0xa, parse_int_return
	# ascii offset
	subi $t1, $t1, 0x30
	# Jump to error if digit is invalid
	bge $t1, 10, parse_int_error
	blt $t1, 0, parse_int_error
	# Move result one digit left
	mulu $v0, $v0, 10
	# Add digit to result
	addu $v0, $v0, $t1
	# Increment $t0 and loop
	addiu $t0, $t0, 1
	j parse_int_loop
parse_int_error:
	li $v1 1
	jr $ra
parse_int_return:
	li $v1 0
	jr $ra